! ###########################################################
! #                                                         #
! #             THE TWOSTREAM LIDORT MODEL                  #
! #                                                         #
! #      (LInearized Discrete Ordinate Radiative Transfer)  #
! #       --         -        -        -         -          #
! #                                                         #
! ###########################################################

! ###########################################################
! #                                                         #
! #  Authors :      Robert. J. D. Spurr (1)                 #
! #                 Vijay Natraj        (2)                 #
! #                                                         #
! #  Address (1) :     RT Solutions, Inc.                   #
! #                    9 Channing Street                    #
! #                    Cambridge, MA 02138, USA             #
! #  Tel:             (617) 492 1183                        #
! #  Email :           rtsolutions@verizon.net              #
! #                                                         #
! #  Address (2) :     CalTech                              #
! #                    Department of Planetary Sciences     #
! #                    1200 East California Boulevard       #
! #                    Pasadena, CA 91125                   #
! #  Tel:             (626) 395 6962                        #
! #  Email :           vijay@gps.caltech.edu                #
! #                                                         #
! #  Version 1.0-1.3 :                                      #
! #     Mark 1: October  2010                               #
! #     Mark 2: May      2011, with BRDFs                   #
! #     Mark 3: October  2011, with Thermal sources         #
! #                                                         #
! #  Version 2.0-2.1 :                                      #
! #     Mark 4: November 2012, LCS/LPS Split, Fixed Arrays  #
! #     Mark 5: December 2012, Observation Geometry option  #
! #                                                         #
! #  Version 2.2-2.3 :                                      #
! #     Mark 6: July     2013, Level outputs + control      #
! #     Mark 7: December 2013, Flux outputs  + control      #
! #     Mark 8: January  2014, Surface Leaving + control    #
! #     Mark 9: June     2014, Inverse Pentadiagonal        #
! #                                                         #
! ###########################################################

! #############################################################
! #                                                           #
! #   This Version of LIDORT-2STREAM comes with a GNU-style   #
! #   license. Please read the license carefully.             #
! #                                                           #
! #############################################################

! ###############################################################
! #                                                             #
! # Regular BVP: Subroutines in this Module                     #
! #                                                             #
! #            TWOSTREAM_BVP_LP_SOLUTION_MASTER     (master)    #
! #            TWOSTREAM_LP_BVPCOLUMN_SETUP                     #
! #                                                             #
! ###############################################################

module twostream_lp_bvproblem_m

PUBLIC

contains

SUBROUTINE TWOSTREAM_BVP_LP_SOLUTION_MASTER &
     ( MAXLAYERS, MAXTOTAL, MAXBEAMS, MAX_ATMOSWFS,                   & ! Dimensions
       DO_INVERSE, DO_INCLUDE_DIRECTBEAM, DO_PLANE_PARALLEL,          & ! inputs
       DO_INCLUDE_THERMEMISS, DO_SOLAR_SOURCES,                       & ! inputs
       DO_INCLUDE_SURFACE,       DO_BRDF_SURFACE,                     & ! inputs
       FOURIER_COMPONENT, IPARTIC, NLAYERS, NTOTAL,                   & ! inputs
       VARIATION_INDEX, N_WEIGHTFUNCS,                                & ! inputs
       SURFACE_FACTOR, ALBEDO, BRDF_F, STREAM_VALUE,                  & ! inputs
       DIRECT_BEAM, CHAPMAN_FACTORS,INITIAL_TRANS, T_DELT_MUBAR,      & ! inputs
       WVEC, EIGENTRANS, XPOS, XNEG, LCON, MCON,MAT, ELM, SELM,       & ! inputs
       L_DELTAU_VERT, LP_INITIAL_TRANS, LP_T_DELT_MUBAR,              & ! inputs
       L_EIGENTRANS, L_XPOS, L_XNEG, LP_WVEC, L_T_WUPPER, L_T_WLOWER, & ! inputs
       L_WUPPER, L_WLOWER, COL2_WF, SCOL2_WF,                         & ! Output
       NCON, PCON, NCON_XVEC, PCON_XVEC )                               ! Output

      implicit none

!  precision

      INTEGER, PARAMETER :: dp     = KIND( 1.0D0 )

!  input arguments
!  ---------------

!  Dimensions

      INTEGER, INTENT(IN)  :: MAXLAYERS, MAXTOTAL, MAXBEAMS, MAX_ATMOSWFS

!  Inverse control

      LOGICAL, INTENT(IN)  :: DO_INVERSE

!  inclusion flags

      LOGICAL, INTENT(IN)  :: DO_INCLUDE_DIRECTBEAM
      LOGICAL, INTENT(IN)  :: DO_PLANE_PARALLEL

!  Source flags

      LOGICAL, INTENT(IN)  :: DO_INCLUDE_THERMEMISS
      LOGICAL, INTENT(IN)  :: DO_SOLAR_SOURCES

!  Surface flags

      LOGICAL, INTENT(IN)  :: DO_INCLUDE_SURFACE
      LOGICAL, INTENT(IN)  :: DO_BRDF_SURFACE

!  Fourier component and beam number

      INTEGER, INTENT(IN)  :: FOURIER_COMPONENT, IPARTIC

!  Numbers

      INTEGER, INTENT(IN)  :: NLAYERS, NTOTAL

!  Linearization control

      INTEGER, INTENT(IN)  :: VARIATION_INDEX
      INTEGER, INTENT(IN)  :: N_WEIGHTFUNCS

!  Surface reflectance

      REAL(kind=dp), INTENT(IN)  ::  SURFACE_FACTOR
      REAL(kind=dp), INTENT(IN)  ::  ALBEDO, BRDF_F(0:1)

!  Stream

      REAL(kind=dp), INTENT(IN)  ::  STREAM_VALUE

!  Direct beam

      REAL(kind=dp), INTENT(IN)  ::  DIRECT_BEAM ( MAXBEAMS )
      REAL(kind=dp), INTENT(IN)  ::  CHAPMAN_FACTORS ( MAXLAYERS, MAXLAYERS, MAXBEAMS )

!  tramsittance factors for solar beams.

      REAL(kind=dp), INTENT(IN)  ::  INITIAL_TRANS  ( MAXLAYERS, MAXBEAMS )
      REAL(kind=dp), INTENT(IN)  ::  T_DELT_MUBAR   ( MAXLAYERS, MAXBEAMS )

!  Eigenvector solutions

      REAL(kind=dp), INTENT(IN)  ::  EIGENTRANS(MAXLAYERS)
      REAL(kind=dp), INTENT(IN)  ::  XPOS(2,MAXLAYERS)
      REAL(kind=dp), INTENT(IN)  ::  XNEG(2,MAXLAYERS)

!  particular solutions

      REAL(kind=dp), INTENT(IN)  ::  WVEC   ( 2, MAXLAYERS )

!  Pentadiagonal Matrix entries for solving BCs

      REAL(kind=dp), INTENT(IN)  ::  MAT(MAXTOTAL,5)

!  Pentadiagonal elimination marix

      REAL(kind=dp), INTENT(IN)  ::  ELM (MAXTOTAL,4)

!  single layer elimination matrix 

      REAL(kind=dp), INTENT(IN)  ::  SELM (2,2)

!  Solution constants of integration, and related quantities

      REAL(kind=dp), INTENT(IN)  ::  LCON(MAXLAYERS)
      REAL(kind=dp), INTENT(IN)  ::  MCON(MAXLAYERS)

!  Linearized tramsittance factors for solar beams.

      REAL(kind=dp), INTENT(IN)  ::  LP_INITIAL_TRANS  ( MAXLAYERS, MAXBEAMS,MAXLAYERS,MAX_ATMOSWFS )
      REAL(kind=dp), INTENT(IN)  ::  LP_T_DELT_MUBAR   ( MAXLAYERS, MAXBEAMS,MAXLAYERS,MAX_ATMOSWFS )

!  Linearized Beam solutions

      REAL(kind=dp), INTENT(IN)  ::  LP_WVEC(2,MAXLAYERS,MAXLAYERS,MAX_ATMOSWFS)

!  Linearized up and down solutions to the homogeneous RT equations

      REAL(kind=dp), INTENT(IN)  ::  L_EIGENTRANS(MAXLAYERS,MAX_ATMOSWFS)
      REAL(kind=dp), INTENT(IN)  ::  L_XPOS(2,MAXLAYERS,MAX_ATMOSWFS)
      REAL(kind=dp), INTENT(IN)  ::  L_XNEG(2,MAXLAYERS,MAX_ATMOSWFS)

!  Linearized Thermal solutions at boundaries

      REAL(kind=dp), INTENT(IN)  :: L_T_WUPPER(2,MAXLAYERS,MAX_ATMOSWFS)
      REAL(kind=dp), INTENT(IN)  :: L_T_WLOWER(2,MAXLAYERS,MAX_ATMOSWFS)

!  Direct beam linearizations

      REAL(kind=dp), INTENT(IN)  ::  L_DELTAU_VERT   ( MAXLAYERS, MAX_ATMOSWFS )

!  output
!  ------

!  Linearized boundary conditions

      REAL(kind=dp), INTENT(OUT) :: L_WLOWER ( 2, MAXLAYERS, MAX_ATMOSWFS )
      REAL(kind=dp), INTENT(OUT) :: L_WUPPER ( 2, MAXLAYERS, MAX_ATMOSWFS )

!  Weighting function column matrices

      REAL(kind=dp), INTENT(OUT) :: COL2_WF  ( MAXTOTAL,MAX_ATMOSWFS)
      REAL(kind=dp), INTENT(OUT) :: SCOL2_WF ( 2,     MAX_ATMOSWFS)

!  Linearized Solution constants of integration, and related quantities

      REAL(kind=dp), INTENT(OUT) :: NCON(MAXLAYERS,MAX_ATMOSWFS)
      REAL(kind=dp), INTENT(OUT) :: PCON(MAXLAYERS,MAX_ATMOSWFS)

      REAL(kind=dp), INTENT(OUT) :: NCON_XVEC(2,MAXLAYERS,MAX_ATMOSWFS)
      REAL(kind=dp), INTENT(OUT) :: PCON_XVEC(2,MAXLAYERS,MAX_ATMOSWFS)

!  Local variables
!  ---------------

      INTEGER       :: N, N1, I, Q, NM, NP, NI, INM, INP, NLAY1
      REAL(kind=dp) :: A, B, DEN, TERM1, TERM2
      LOGICAL       :: MBCL3, MBCL4

!  Linearization of the regular BVP case
!  =====================================

!  Initialize

      MBCL3 = .FALSE.
      MBCL4 = .FALSE.

!  Set up the column vectors for Profile linearizations
!  ----------------------------------------------------

!  Profile: Boundary condition flags for special cases
!  Profile: Compute the main column B' where AX = B'

!  Boundary condition flags for special cases

      MBCL3 = ( VARIATION_INDEX .EQ. 1 )
      MBCL4 = ( VARIATION_INDEX .EQ. NLAYERS )

      CALL TWOSTREAM_LP_BVPCOLUMN_SETUP &
            ( MAXLAYERS, MAXTOTAL, MAXBEAMS, MAX_ATMOSWFS,          & ! Dimensions
              DO_INVERSE, DO_INCLUDE_DIRECTBEAM, DO_PLANE_PARALLEL, & ! inputs
              DO_INCLUDE_THERMEMISS, DO_SOLAR_SOURCES,              & ! inputs
              DO_INCLUDE_SURFACE,    DO_BRDF_SURFACE,               & ! inputs
              FOURIER_COMPONENT, IPARTIC, NLAYERS, NTOTAL,          & ! input
              VARIATION_INDEX, N_WEIGHTFUNCS, MBCL3, MBCL4,         & ! input
              SURFACE_FACTOR, ALBEDO, BRDF_F, STREAM_VALUE,         & ! input
              DIRECT_BEAM, INITIAL_TRANS, T_DELT_MUBAR, WVEC,       & ! inputs
              EIGENTRANS, XPOS, XNEG,  LCON, MCON,                  & ! inputs
              LP_INITIAL_TRANS, LP_T_DELT_MUBAR, LP_WVEC,           & ! inputs
              L_EIGENTRANS, L_XPOS, L_XNEG, L_T_WUPPER, L_T_WLOWER, & ! inputs
              L_DELTAU_VERT, CHAPMAN_FACTORS,                       & ! inputs
              L_WUPPER, L_WLOWER, COL2_WF, SCOL2_WF )                 ! Output

!  BVP back-substitution: With compression (multilayers)
!  -----------------------------------------------------

      IF ( NLAYERS .GT. 1 ) THEN

!  For each weighting function

        DO Q = 1, N_WEIGHTFUNCS

!  Fill up back-substitution array

          COL2_WF(1,Q) = COL2_WF(1,Q) * ELM(1,3) 
          COL2_WF(2,Q) = (MAT(2,2)*COL2_WF(1,Q)-COL2_WF(2,Q))*ELM(2,3) 
          DO I = 3, NTOTAL
            DEN = ELM(I,4)
            TERM1 = MAT(I,1) * COL2_WF(I-2,Q)
            TERM2 = ELM(I,3) * COL2_WF(I-1,Q) - COL2_WF(I,Q)
            COL2_WF(I,Q) = ( TERM1 + TERM2 ) * DEN
          ENDDO

!  back-substitution 

          N1 = NTOTAL-1
          COL2_WF(N1,Q) = COL2_WF(N1,Q) + ELM(N1,1)*COL2_WF(NTOTAL,Q) 
          DO I = NTOTAL-2, 1, -1 
            TERM1 = ELM(I,1) * COL2_WF(I+1,Q)
            TERM2 = ELM(I,2) * COL2_WF(I+2,Q)
            COL2_WF(I,Q) = COL2_WF(I,Q) + TERM1 + TERM2
          ENDDO

!  Set integration constants NCON and PCON for +/- eigensolutions

          if ( do_inverse ) then
            NLAY1 = 1 + NLAYERS
            DO N = 1, NLAYERS
              NI = NLAY1 - N
              INP = 2*NI ; INM = INP - 1
              NCON(N,Q) = COL2_WF(INP,Q)
              PCON(N,Q) = COL2_WF(INM,Q)
            enddo
          else
            DO N = 1, NLAYERS
              NM = 2*N-1 ; NP = NM + 1
              NCON(N,Q) = COL2_WF(NM,Q)
              PCON(N,Q) = COL2_WF(NP,Q)
            ENDDO
          endif

!  End WF loop

        ENDDO

!  Special case for 1 layer

      ELSE IF ( NLAYERS .EQ. 1 ) THEN
        DO Q = 1, N_WEIGHTFUNCS
          A = SCOL2_WF(1,Q) ; B = SCOL2_WF(2,Q)
          SCOL2_WF(1,Q) = SELM(1,1) * A + SELM(1,2) * B
          SCOL2_WF(2,Q) = SELM(2,1) * A + SELM(2,2) * B
          NCON(1,Q) = SCOL2_WF(1,Q)
          PCON(1,Q) = SCOL2_WF(2,Q)
        ENDDO
      ENDIF

!  Associated quantities
!  ---------------------

      DO N = 1, NLAYERS
        DO Q = 1, N_WEIGHTFUNCS
          DO I = 1, 2
            NCON_XVEC(I,N,Q) = NCON(N,Q)*XPOS(I,N)
            PCON_XVEC(I,N,Q) = PCON(N,Q)*XNEG(I,N)
          ENDDO
        ENDDO
      ENDDO

!  Finish

      RETURN
END SUBROUTINE TWOSTREAM_BVP_LP_SOLUTION_MASTER

!

SUBROUTINE TWOSTREAM_LP_BVPCOLUMN_SETUP &
            ( MAXLAYERS, MAXTOTAL, MAXBEAMS, MAX_ATMOSWFS,          & ! Dimensions
              DO_INVERSE, DO_INCLUDE_DIRECTBEAM, DO_PLANE_PARALLEL, & ! inputs
              DO_INCLUDE_THERMEMISS, DO_SOLAR_SOURCES,              & ! inputs
              DO_INCLUDE_SURFACE,    DO_BRDF_SURFACE,               & ! inputs
              FOURIER, IPARTIC, NLAYERS, NTOTAL,                    & ! inputs
              LAYER_TO_VARY, N_LAYER_WFS, MBCL3, MBCL4,             & ! inputs
              SURFACE_FACTOR, ALBEDO, BRDF_F, STREAM_VALUE,         & ! inputs
              DIRECT_BEAM, INITIAL_TRANS, T_DELT_MUBAR, WVEC,       & ! inputs
              EIGENTRANS, XPOS, XNEG,  LCON, MCON,                  & ! inputs
              LP_INITIAL_TRANS, LP_T_DELT_MUBAR, LP_WVEC,           & ! inputs
              L_EIGENTRANS, L_XPOS, L_XNEG, L_T_WUPPER, L_T_WLOWER, & ! inputs
              L_DELTAU_VERT, CHAPMAN_FACTORS,                       & ! inputs
              L_WUPPER, L_WLOWER, COL2_WF, SCOL2_WF )                 ! Output

      implicit none

!  precision

      INTEGER, PARAMETER :: dp     = KIND( 1.0D0 )

!  input arguments
!  ---------------

!  Dimensions

      INTEGER, INTENT(IN)  :: MAXLAYERS, MAXTOTAL, MAXBEAMS, MAX_ATMOSWFS

!  Inverse control

      LOGICAL, INTENT(IN)  :: DO_INVERSE

!  inclusion flags

      LOGICAL, INTENT(IN)  :: DO_INCLUDE_DIRECTBEAM
      LOGICAL, INTENT(IN)  :: DO_PLANE_PARALLEL

!  Source flags

      LOGICAL, INTENT(IN)  :: DO_INCLUDE_THERMEMISS
      LOGICAL, INTENT(IN)  :: DO_SOLAR_SOURCES

!  Surface flags

      LOGICAL, INTENT(IN)  :: DO_INCLUDE_SURFACE
      LOGICAL, INTENT(IN)  :: DO_BRDF_SURFACE

!  Fourier component and beam number

      INTEGER, INTENT(IN)  :: FOURIER, IPARTIC

!  Numbers

      INTEGER, INTENT(IN)  :: NLAYERS, NTOTAL

!  Linearization control

      INTEGER, INTENT(IN)  :: LAYER_TO_VARY
      INTEGER, INTENT(IN)  :: N_LAYER_WFS
      LOGICAL, INTENT(IN)  :: MBCL3, MBCL4

!  Surface control, surface factor = 1+delta(m,0)

      REAL(kind=dp), INTENT(IN)  :: SURFACE_FACTOR
      REAL(kind=dp), INTENT(IN)  :: ALBEDO, BRDF_F(0:1)

!  Stream

      REAL(kind=dp), INTENT(IN)  :: STREAM_VALUE

!  tramsittance factors for solar beams.

      REAL(kind=dp), INTENT(IN)  :: INITIAL_TRANS  ( MAXLAYERS, MAXBEAMS )
      REAL(kind=dp), INTENT(IN)  :: T_DELT_MUBAR   ( MAXLAYERS, MAXBEAMS )

!  Eigenvector solutions

      REAL(kind=dp), INTENT(IN)  :: EIGENTRANS(MAXLAYERS)
      REAL(kind=dp), INTENT(IN)  :: XPOS(2,MAXLAYERS)
      REAL(kind=dp), INTENT(IN)  :: XNEG(2,MAXLAYERS)

!  particular solutions

      REAL(kind=dp), INTENT(IN)  :: WVEC   ( 2, MAXLAYERS )

!  Direct beam

      REAL(kind=dp), INTENT(IN)  :: DIRECT_BEAM ( MAXBEAMS )

!  Solution constants of integration, and related quantities

      REAL(kind=dp), INTENT(IN)  :: LCON(MAXLAYERS)
      REAL(kind=dp), INTENT(IN)  :: MCON(MAXLAYERS)

!  Linearized tramsittance factors for solar beams.

      REAL(kind=dp), INTENT(IN)  :: LP_INITIAL_TRANS  ( MAXLAYERS, MAXBEAMS, MAXLAYERS, MAX_ATMOSWFS )
      REAL(kind=dp), INTENT(IN)  :: LP_T_DELT_MUBAR   ( MAXLAYERS, MAXBEAMS, MAXLAYERS, MAX_ATMOSWFS )

!  Linearized Beam solutions

      REAL(kind=dp), INTENT(IN)  :: LP_WVEC(2,MAXLAYERS,MAXLAYERS,MAX_ATMOSWFS)

!  Linearized up and down solutions to the homogeneous RT equations

      REAL(kind=dp), INTENT(IN)  ::  L_EIGENTRANS(MAXLAYERS,MAX_ATMOSWFS)
      REAL(kind=dp), INTENT(IN)  ::  L_XPOS(2,MAXLAYERS,MAX_ATMOSWFS)
      REAL(kind=dp), INTENT(IN)  ::  L_XNEG(2,MAXLAYERS,MAX_ATMOSWFS)

!  Linearized Thermal solutions at boundaries

      REAL(kind=dp), INTENT(IN)  :: L_T_WUPPER(2,MAXLAYERS,MAX_ATMOSWFS)
      REAL(kind=dp), INTENT(IN)  :: L_T_WLOWER(2,MAXLAYERS,MAX_ATMOSWFS)

!  Direct beam linearizations

      REAL(kind=dp), INTENT(IN)  ::  L_DELTAU_VERT   ( MAXLAYERS, MAX_ATMOSWFS )
      REAL(kind=dp), INTENT(IN)  ::  CHAPMAN_FACTORS ( MAXLAYERS, MAXLAYERS, MAXBEAMS )

!  Outputs
!  -------

!  Linearized Beam+thermal solutions at boundaries

      REAL(kind=dp), INTENT(OUT) :: L_WUPPER(2,MAXLAYERS,MAX_ATMOSWFS)
      REAL(kind=dp), INTENT(OUT) :: L_WLOWER(2,MAXLAYERS,MAX_ATMOSWFS)

!  Weighting function column matrices

      REAL(kind=dp), INTENT(OUT) :: COL2_WF  ( MAXTOTAL,MAX_ATMOSWFS)
      REAL(kind=dp), INTENT(OUT) :: SCOL2_WF ( 2,     MAX_ATMOSWFS)

!  local variables
!  ---------------

      INTEGER       :: Q, N, N1, I, CM, C0, K, M, SIGNI(2), NTOT1
      REAL(kind=dp) :: CPOS, CNEG, L_HOM, L_BEAM, FAC, L_PAR
      REAL(kind=dp) :: HSP_U, HSM_U, CONST, WDEL, LTERM
      REAL(kind=dp) :: VAR1, VAR2, VAR_U, TRANS2, FACTOR
      REAL(kind=dp) :: TOA_WF (MAX_ATMOSWFS), SURFACE_WF (MAX_ATMOSWFS)
      LOGICAL       :: REGULAR_BCL3, REGULAR_BCL4

!  initialise
!  ----------

!  zero the results vectors

      DO Q = 1, MAX_ATMOSWFS
        COL2_WF(1:NTOTAL,Q) = 0.0d0
      ENDDO

!  Layer to vary, Fourier component

      K = LAYER_TO_VARY
      M = FOURIER

!    This is a very important zeroing.................!!!!!

      DO I = 1, 2
        DO Q = 1, N_LAYER_WFS
          DO N = 1, NLAYERS
            L_WUPPER(I,N,Q) = 0.0d0
            L_WLOWER(I,N,Q) = 0.0d0
          ENDDO
        ENDDO
      ENDDO

!  Copy already existing thermal solution linearization

      IF ( DO_INCLUDE_THERMEMISS ) THEN
        DO I = 1, 2
          DO Q = 1, N_LAYER_WFS
            L_WUPPER(I,K,Q) = L_T_WUPPER(I,K,Q)
            L_WLOWER(I,K,Q) = L_T_WLOWER(I,K,Q)
          ENDDO
        ENDDO
      ENDIF

!  Get the linearized beam solution for the varying layer

      IF ( DO_SOLAR_SOURCES ) THEN
        N = K
        CONST   = INITIAL_TRANS(N,IPARTIC)
        WDEL    = T_DELT_MUBAR(N,IPARTIC)
        DO Q = 1, N_LAYER_WFS
          VAR1 = LP_T_DELT_MUBAR(N,IPARTIC,N,Q) * CONST
          DO I = 1, 2
            LTERM = CONST * LP_WVEC(I,N,N,Q)
            L_WUPPER(I,N,Q) = L_WUPPER(I,N,Q) + LTERM
            L_WLOWER(I,N,Q) = L_WLOWER(I,N,Q) + WDEL * LTERM + VAR1*WVEC(I,N)
          ENDDO
        ENDDO
      ENDIF

!  complete boundary condition flags

      REGULAR_BCL3 = .NOT.MBCL3
      REGULAR_BCL4 = .NOT.MBCL4

!  BCL1 or BCL3M - top of first layer (TOA), UPPER boundary condition
!  ------------------------------------------------------------------

      N = 1

!    If this layer is the one that is varied, use MODIFIED_BCL3 (BCL3M)
!       .. contribution L_PARTI! from beam  solution variations
!       .. contribution L_HOM    from eigen solution variations
!    Otherwise, entry is zero

      IF ( MBCL3 ) THEN
       DO Q = 1, N_LAYER_WFS
         L_PAR = - L_WUPPER(1,N,Q)
         CPOS  = L_XPOS(1,N,Q)
         CNEG  = EIGENTRANS(N)   * L_XNEG(1,N,Q) +  &
               L_EIGENTRANS(N,Q) *   XNEG(1,N)
         L_HOM = LCON(N) * CPOS + MCON(N) * CNEG
         TOA_WF(Q) = L_PAR - L_HOM
        ENDDO
      ELSE
        DO Q = 1, N_LAYER_WFS
          TOA_WF(Q) = 0.0d0
        ENDDO
      ENDIF

!  Final layer - use BCL6 or BCL4M (last layer is varying)
!  -------------------------------------------------------

      N = NLAYERS

!  Surface factor

      FACTOR = 0.0d0
      IF ( DO_INCLUDE_SURFACE ) THEN
        IF ( DO_BRDF_SURFACE  ) THEN
          FACTOR = SURFACE_FACTOR * BRDF_F(M)
        ELSE
          FACTOR = SURFACE_FACTOR * ALBEDO
        ENDIF
        FACTOR = FACTOR * STREAM_VALUE
      ENDIF
 
!  Modified BCL4M Component loop

      IF ( MBCL4 ) THEN
       IF ( DO_INCLUDE_SURFACE ) THEN
        DO Q = 1, N_LAYER_WFS
          HSP_U = L_XPOS(1,N,Q) *   EIGENTRANS(N) + &
                    XPOS(1,N)   * L_EIGENTRANS(N,Q)
          HSM_U = L_XNEG(1,N,Q)
          L_PAR = L_WLOWER(2,N,Q) - L_WLOWER(1,N,Q)* FACTOR
          CPOS  =   EIGENTRANS(N)   * L_XPOS(2,N,Q) + &
                  L_EIGENTRANS(N,Q) *   XPOS(2,N)
          CPOS  = CPOS          - HSP_U * FACTOR
          CNEG  = L_XNEG(2,N,Q) - HSM_U * FACTOR
          L_HOM = LCON(N)*CPOS + MCON(N)*CNEG
          SURFACE_WF(Q) = - L_PAR - L_HOM
        ENDDO
       ELSE
        DO Q = 1, N_LAYER_WFS
          L_PAR = L_WLOWER(2,N,Q)
          CPOS  =   EIGENTRANS(N)   * L_XPOS(2,N,Q) + &
                  L_EIGENTRANS(N,Q) *   XPOS(2,N)
          CNEG  = L_XNEG(2,N,Q)
          L_HOM = LCON(N)*CPOS + MCON(N)*CNEG
          SURFACE_WF(Q) = - L_PAR - L_HOM
        ENDDO
       ENDIF
      ENDIF

!  ordinary BCL6 Component loop
 
      IF ( .NOT. MBCL4 ) THEN
       IF ( DO_INCLUDE_SURFACE ) THEN
        DO Q = 1, N_LAYER_WFS
          L_PAR = L_WLOWER(2,N,Q) - L_WLOWER(1,N,Q)* FACTOR
          SURFACE_WF(Q) = - L_PAR
        ENDDO
       ELSE
        DO Q = 1, N_LAYER_WFS
          SURFACE_WF(Q) = - L_WLOWER(2,N,Q)
        ENDDO
       ENDIF
      ENDIF

!  Add direct beam variation to Final boundary

      IF ( DO_INCLUDE_DIRECTBEAM ) THEN
        CM = C0 + 1
        FAC = - DIRECT_BEAM(IPARTIC) * CHAPMAN_FACTORS(N,LAYER_TO_VARY,IPARTIC)
        DO Q = 1, N_LAYER_WFS
          L_BEAM = L_DELTAU_VERT(LAYER_TO_VARY,Q) * FAC
          SURFACE_WF(Q) = SURFACE_WF(Q) + L_BEAM
        ENDDO
      ENDIF

!  Single-layer Slab.  fill both elements of SCOL2_WF and return
!  -------------------------------------------------------------

      IF ( NLAYERS .EQ. 1 ) THEN
         DO Q = 1, N_LAYER_WFS
            SCOL2_WF(1,Q) = TOA_WF    (Q)
            SCOL2_WF(2,Q) = SURFACE_WF(Q)
         ENDDO
         RETURN
      ENDIF

!  Pentadiagonal case, multiple-layers
!  ===================================

      NTOT1 = NTOTAL + 1
      SIGNI(1) = 1 ;  SIGNI(2) = 2
      if ( do_inverse ) SIGNI = -SIGNI

!  BCL1 or BCL3M - top of first layer (TOA), UPPER boundary condition
!  ------------------------------------------------------------------

      C0 = 1 ; if ( do_inverse ) C0  = NTOTAL
      DO Q = 1, N_LAYER_WFS
        COL2_WF(C0,Q) = TOA_WF(Q)
      ENDDO

!  BCL2 Intermediate levels between top layer and varying layer
!  ------------------------------------------------------------

!  [not required if top layer is varying, case MODIFIED_BCL3 above]

!  BCL3 - regular upper boundary condition for layer that is varying
!  -----------------------------------------------------------------

      IF ( REGULAR_BCL3 ) THEN
        N = LAYER_TO_VARY
        C0  = 2*N - 3 ; if ( do_inverse ) C0  = NTOT1 - C0
        DO I = 1, 2
          CM = C0 + SIGNI(I)
          DO Q = 1, N_LAYER_WFS
            L_PAR = + L_WUPPER(I,N,Q)
            CPOS  = L_XPOS(I,N,Q)
            CNEG  = EIGENTRANS(N)   * L_XNEG(I,N,Q) +  &
                  L_EIGENTRANS(N,Q) *   XNEG(I,N)
            L_HOM = LCON(N) * CPOS + MCON(N) * CNEG
            COL2_WF(CM,Q) = L_PAR + L_HOM
          ENDDO
        ENDDO
      ENDIF
 
!  BCL4 - LOWER boundary condition for varying layer
!  -------------------------------------------------

!   special case when layer-to-vary = last (albedo) layer is treated
!   separately below under MODIFIED BCL4.

      IF ( REGULAR_BCL4 ) THEN
        N  = LAYER_TO_VARY
        N1 = N + 1
        C0 = 2*N - 1 ; if ( do_inverse ) C0  = NTOT1 - C0

!  Get the linearized beam solution for the next layer
!  Distinguish two cases
!  ..(a) quasi-spherical for n > 1 (only gets done for this case anyway)
!  ..(b) plane-parallel and qs for n = 1
!     Consistent logarithmi! linearization of INITIAL_TRANS

        IF ( DO_SOLAR_SOURCES ) THEN
          CONST   = INITIAL_TRANS(N1,IPARTIC)
          WDEL    = T_DELT_MUBAR(N1,IPARTIC)
          TRANS2  = CONST * WDEL
          IF ( .NOT. DO_PLANE_PARALLEL  ) THEN
            DO Q = 1, N_LAYER_WFS
              VAR1 = LP_T_DELT_MUBAR(N1,IPARTIC,K,Q) * CONST
              VAR2 = LP_INITIAL_TRANS(N1,IPARTIC,K,Q)
              DO I = 1, 2
                VAR_U = VAR2 * WVEC(I,N1) + LP_WVEC(I,N1,K,Q)
                L_WUPPER(I,N1,Q) = L_WUPPER(I,N1,Q) + CONST  * VAR_U
                L_WLOWER(I,N1,Q) = L_WLOWER(I,N1,Q) + TRANS2 * VAR_U + VAR1 * WVEC(I,N1)
              ENDDO
            ENDDO
          ELSE
            DO Q = 1, N_LAYER_WFS
              VAR1 = LP_INITIAL_TRANS(N1,IPARTIC,K,Q) * CONST
              DO I = 1, 2
                LTERM = VAR1 * WVEC(I,N1)
                L_WUPPER(I,N1,Q) = L_WUPPER(I,N1,Q) + LTERM
                L_WLOWER(I,N1,Q) = L_WLOWER(I,N1,Q) + LTERM * WDEL
              ENDDO
            ENDDO
          ENDIF
        ENDIF

!  .. 2 contributions to WVAR from beam solution variations BEAM_V and BEAM_U 
!  .. contribution HVAR homogeneous (eigenvalue) solution variations

        DO I = 1, 2
          CM = C0 + SIGNI(I)
          DO Q = 1, N_LAYER_WFS
            L_PAR = L_WUPPER(I,N1,Q) - L_WLOWER(I,N,Q)
            CNEG  = L_XNEG(I,N,Q)
            CPOS  = EIGENTRANS(N)   * L_XPOS(I,N,Q) + &
                  L_EIGENTRANS(N,Q) *   XPOS(I,N)
            L_HOM = LCON(N)*CPOS + MCON(N)*CNEG
            COL2_WF(CM,Q) = L_PAR - L_HOM
          ENDDO
        ENDDO

!  End Modified BCL4

      ENDIF

!  BCL5 - Intermediate boundary conditions between varying layer & final layer
!  ---------------------------------------------------------------------------

      IF ( REGULAR_BCL4 ) THEN

        DO N = LAYER_TO_VARY + 1, NLAYERS - 1

          N1 = N + 1
          C0 = 2*N - 1; if ( do_inverse ) C0  = NTOT1 - C0

!  Get the linearized beam solution for the next layer
!  Distinguish two cases
!  ..(a) quasi-spherical for n > 1 (only gets done for this case anyway)
!  ..(b) plane-parallel and qs for n1 = 1
!     Consistent logarithmi! linearization of INITIAL_TRANS

          IF ( DO_SOLAR_SOURCES ) THEN
            CONST   = INITIAL_TRANS(N1,IPARTIC)
            WDEL    = T_DELT_MUBAR(N1,IPARTIC)
            TRANS2  = CONST * WDEL
            IF ( .NOT. DO_PLANE_PARALLEL  ) THEN
              DO Q = 1, N_LAYER_WFS
                VAR1 = LP_T_DELT_MUBAR(N1,IPARTIC,K,Q) * CONST
                VAR2 = LP_INITIAL_TRANS(N1,IPARTIC,K,Q)
                DO I = 1, 2
                  VAR_U = VAR2 * WVEC(I,N1) + LP_WVEC(I,N1,K,Q)
                  L_WUPPER(I,N1,Q) = L_WUPPER(I,N1,Q) + CONST  * VAR_U
                  L_WLOWER(I,N1,Q) = L_WLOWER(I,N1,Q) + TRANS2 * VAR_U + VAR1 * WVEC(I,N1)
                ENDDO
              ENDDO
            ELSE
              DO Q = 1, N_LAYER_WFS
                VAR1 = LP_INITIAL_TRANS(N1,IPARTIC,K,Q) * CONST
                DO I = 1, 2
                  LTERM = VAR1 * WVEC(I,N1)
                  L_WUPPER(I,N1,Q) = L_WUPPER(I,N1,Q) + LTERM
                  L_WLOWER(I,N1,Q) = L_WLOWER(I,N1,Q) + LTERM * WDEL
                ENDDO
              ENDDO
            ENDIF
          ENDIF

!  .. contributions from beam solution (direct assign). No homog. variation

          DO I = 1, 2
            CM = C0 + SIGNI(I)
            DO Q = 1, N_LAYER_WFS
              COL2_WF(CM,Q) = L_WUPPER(I,N1,Q) - L_WLOWER(I,N,Q)
            ENDDO
          ENDDO

!  end layer loop

        ENDDO

!  end BCL5 boundary conditions

      ENDIF

!  Final layer - use BCL6 or BCL4M (last layer is varying)
!  -------------------------------------------------------

      C0 = NTOTAL ; if ( do_inverse ) C0  = 1
      DO Q = 1, N_LAYER_WFS
        COL2_WF(C0,Q) = SURFACE_WF(Q)
      ENDDO

!  finish

      RETURN
END SUBROUTINE TWOSTREAM_LP_BVPCOLUMN_SETUP

end module twostream_lp_bvproblem_m
